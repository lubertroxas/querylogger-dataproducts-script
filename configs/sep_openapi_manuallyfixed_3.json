    {
        "openapi" : "3.0.1",
        "info" : {
        "title" : "Starburst Enterprise API documentation",
        "description" : "Documentation with details about endpoints and entities.",
        "contact" : {
            "name" : "Starburst",
            "url" : "https://docs.starburst.io/support.html"
        },
        "license" : {
            "name" : "Copyright Starburst Data",
            "url" : "https://starburst.io"
        },
        "version" : "1"
        },
        "paths" : {
        "/api/v1/biac/audit/accessLogs" : {
            "get" : {
            "tags" : [ "AuditLogs" ],
            "summary" : "List Starburst built-in access control access logs",
            "operationId" : "listAccessLogs",
            "parameters" : [ {
                "name" : "pageToken",
                "in" : "query",
                "description" : "Page token",
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "pageSize",
                "in" : "query",
                "description" : "Page size",
                "schema" : {
                "maximum" : 512,
                "minimum" : 1,
                "type" : "string",
                "default" : "100"
                }
            }, {
                "name" : "pageSort",
                "in" : "query",
                "description" : "Sorting order",
                "schema" : {
                "type" : "string",
                "default" : "desc",
                "enum" : [ "asc", "desc" ]
                }
            }, {
                "name" : "startDate",
                "in" : "query",
                "description" : "Start of the log entry timestamp interval to match (inclusive)",
                "schema" : {
                "type" : "string",
                "format" : "date-time"
                }
            }, {
                "name" : "endDate",
                "in" : "query",
                "description" : "End of the log entry timestamp interval to match (exclusive)",
                "schema" : {
                "type" : "string",
                "format" : "date-time"
                }
            }, {
                "name" : "queryId",
                "in" : "query",
                "description" : "Query ID for which log entries should be matched",
                "schema" : {
                "type" : "string",
                "format" : "date-time"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultAccessLogResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/biac/audit/changeLogs" : {
            "get" : {
            "tags" : [ "AuditLogs" ],
            "summary" : "List Starburst built-in access control change logs",
            "operationId" : "listChangeLogs",
            "parameters" : [ {
                "name" : "pageToken",
                "in" : "query",
                "description" : "Page token",
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "pageSize",
                "in" : "query",
                "description" : "Page size",
                "schema" : {
                "maximum" : 512,
                "minimum" : 1,
                "type" : "string",
                "default" : "100"
                }
            }, {
                "name" : "pageSort",
                "in" : "query",
                "description" : "Sorting order",
                "schema" : {
                "type" : "string",
                "default" : "desc",
                "enum" : [ "asc", "desc" ]
                }
            }, {
                "name" : "startDate",
                "in" : "query",
                "description" : "Start of the log entry timestamp interval to match (inclusive)",
                "schema" : {
                "type" : "string",
                "format" : "date-time"
                }
            }, {
                "name" : "endDate",
                "in" : "query",
                "description" : "End of the log entry timestamp interval to match (exclusive)",
                "schema" : {
                "type" : "string",
                "format" : "date-time"
                }
            }, {
                "name" : "queryId",
                "in" : "query",
                "description" : "Query ID for which log entries should be matched",
                "schema" : {
                "type" : "string",
                "format" : "date-time"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultChangeLogResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/biac/roles/{roleId}/columnMasks" : {
            "get" : {
            "tags" : [ "ColumnMasks" ],
            "summary" : "List all the column masks of a role.",
            "operationId" : "listRoleColumnMasks",
            "parameters" : [ {
                "name" : "pageToken",
                "in" : "query",
                "description" : "Page token",
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "pageSize",
                "in" : "query",
                "description" : "Page size",
                "schema" : {
                "maximum" : 512,
                "minimum" : 1,
                "type" : "string",
                "default" : "100"
                }
            }, {
                "name" : "pageSort",
                "in" : "query",
                "description" : "Sorting order",
                "schema" : {
                "type" : "string",
                "default" : "desc",
                "enum" : [ "asc", "desc" ]
                }
            }, {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultColumnMaskResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            },
            "post" : {
            "tags" : [ "ColumnMasks" ],
            "summary" : "Add a column mask to a role to mask column values from subjects assigned to the role.",
            "operationId" : "addColumnMaskToRole",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "ColumnMaskPayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ColumnMaskResponse"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            }
        },
        "/api/v1/biac/roles/{roleId}/columnMasks/{columnMaskId}" : {
            "get" : {
            "tags" : [ "ColumnMasks" ],
            "summary" : "Get a column mask of a given role.",
            "operationId" : "getColumnMask",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            }, {
                "name" : "columnMaskId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ColumnMaskResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            },
            "delete" : {
            "tags" : [ "ColumnMasks" ],
            "summary" : "Remove a column mask from a role.",
            "operationId" : "deleteRoleColumnMask",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            }, {
                "name" : "columnMaskId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "204" : {
                "description" : "No Content",
                "content" : {
                    "*/*" : { }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            }
        },
        "/api/v1/biac/entityCategories" : {
            "get" : {
            "tags" : [ "EntityCategories" ],
            "summary" : "List all entity categories in which access control can be managed by Starburst built-in access control.",
            "operationId" : "listEntityCategories",
            "parameters" : [ {
                "name" : "pageToken",
                "in" : "query",
                "description" : "Page token",
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "pageSize",
                "in" : "query",
                "description" : "Page size",
                "schema" : {
                "maximum" : 512,
                "minimum" : 1,
                "type" : "string",
                "default" : "100"
                }
            }, {
                "name" : "pageSort",
                "in" : "query",
                "description" : "Sorting order",
                "schema" : {
                "type" : "string",
                "default" : "desc",
                "enum" : [ "asc", "desc" ]
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultEntityCategory"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                }
            }
            }
        },
        "/api/v1/biac/entityCategories/{entityCategory}/actions" : {
            "get" : {
            "tags" : [ "EntityCategories" ],
            "summary" : "List all actions that can be allowed or denied for an EntityCategory",
            "operationId" : "listAvailableActions",
            "parameters" : [ {
                "name" : "entityCategory",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultAction"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                }
            }
            }
        },
        "/api/v1/biac/expressions/columnMask" : {
            "get" : {
            "tags" : [ "ColumnMasks" ],
            "summary" : "List the expressions that can be used to mask column values",
            "operationId" : "listColumnMaskExpressions",
            "parameters" : [ {
                "name" : "pageToken",
                "in" : "query",
                "description" : "Page token",
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "pageSize",
                "in" : "query",
                "description" : "Page size",
                "schema" : {
                "maximum" : 512,
                "minimum" : 1,
                "type" : "string",
                "default" : "100"
                }
            }, {
                "name" : "pageSort",
                "in" : "query",
                "description" : "Sorting order",
                "schema" : {
                "type" : "string",
                "default" : "desc",
                "enum" : [ "asc", "desc" ]
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultExpressionResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            },
            "post" : {
            "tags" : [ "ColumnMasks" ],
            "summary" : "Create an expression that can be applied to mask column values",
            "operationId" : "createColumnMaskExpression",
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "ExpressionPayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ExpressionResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            }
        },
        "/api/v1/biac/expressions/rowFilter" : {
            "get" : {
            "tags" : [ "RowFilters" ],
            "summary" : "List expressions that can be applied to filter table rows from query results",
            "operationId" : "listRowFilterExpressions",
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultExpressionResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            },
            "post" : {
            "tags" : [ "RowFilters" ],
            "summary" : "Create an expression that can be applied to filter table rows from query results",
            "operationId" : "createRowFilterExpression",
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "ExpressionPayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ExpressionResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            }
        },
        "/api/v1/biac/expressions/columnMask/{columnMaskExpressionId}" : {
            "get" : {
            "tags" : [ "ColumnMasks" ],
            "summary" : "Get an expression that can be used to mask column values",
            "operationId" : "getColumnMaskExpression",
            "parameters" : [ {
                "name" : "columnMaskExpressionId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ExpressionResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            },
            "put" : {
            "tags" : [ "ColumnMasks" ],
            "summary" : "Update a column mask expression",
            "operationId" : "updateColumnMaskExpression",
            "parameters" : [ {
                "name" : "columnMaskExpressionId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "ExpressionPayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ExpressionResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            },
            "delete" : {
            "tags" : [ "ColumnMasks" ],
            "summary" : "Delete a column mask expression",
            "operationId" : "deleteColumnMaskExpression",
            "parameters" : [ {
                "name" : "columnMaskExpressionId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "application/json" : { }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            }
        },
        "/api/v1/biac/expressions/rowFilter/{rowFilterExpressionId}" : {
            "get" : {
            "tags" : [ "RowFilters" ],
            "summary" : "Get an expression that can be applied to filter table rows from query results",
            "operationId" : "getRowFilterExpression",
            "parameters" : [ {
                "name" : "rowFilterExpressionId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ExpressionResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            },
            "put" : {
            "tags" : [ "RowFilters" ],
            "summary" : "Update a row filter expression",
            "operationId" : "updateRowFilterExpression",
            "parameters" : [ {
                "name" : "rowFilterExpressionId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "ExpressionPayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ExpressionResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            },
            "delete" : {
            "tags" : [ "RowFilters" ],
            "summary" : "Delete a row filter expression",
            "operationId" : "deleteRowFilterExpression",
            "parameters" : [ {
                "name" : "rowFilterExpressionId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "application/json" : { }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            }
        },
        "/api/v1/biac/roles/{roleId}/grants" : {
            "get" : {
            "tags" : [ "Grants" ],
            "summary" : "List Starburst built-in access control grants of a role",
            "operationId" : "listGrants",
            "parameters" : [ {
                "name" : "pageToken",
                "in" : "query",
                "description" : "Page token",
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "pageSize",
                "in" : "query",
                "description" : "Page size",
                "schema" : {
                "maximum" : 512,
                "minimum" : 1,
                "type" : "string",
                "default" : "100"
                }
            }, {
                "name" : "pageSort",
                "in" : "query",
                "description" : "Sorting order",
                "schema" : {
                "type" : "string",
                "default" : "desc",
                "enum" : [ "asc", "desc" ]
                }
            }, {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultGrantResponse"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            },
            "post" : {
            "tags" : [ "Grants" ],
            "summary" : "Create a Starburst built-in access control grant for a role",
            "operationId" : "createGrant",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "CreateGrantPayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "GrantResponse"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "409" : {
                "description" : "Conflict",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/biac/roles/{roleId}/grants/{grantId}" : {
            "get" : {
            "tags" : [ "Grants" ],
            "summary" : "Get a Starburst built-in access control grant of a role",
            "operationId" : "getGrant",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            }, {
                "name" : "grantId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "GrantResponse"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            },
            "delete" : {
            "tags" : [ "Grants" ],
            "summary" : "Delete a Starburst built-in access control grant of a role",
            "operationId" : "deleteGrant",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            }, {
                "name" : "grantId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "*/*" : { }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/biac/roles/{roleId}/assignments" : {
            "get" : {
            "tags" : [ "RoleAssignments" ],
            "summary" : "List assignments of a Starburst built-in access control role",
            "operationId" : "listRoleAssignments",
            "parameters" : [ {
                "name" : "pageToken",
                "in" : "query",
                "description" : "Page token",
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "pageSize",
                "in" : "query",
                "description" : "Page size",
                "schema" : {
                "maximum" : 512,
                "minimum" : 1,
                "type" : "string",
                "default" : "100"
                }
            }, {
                "name" : "pageSort",
                "in" : "query",
                "description" : "Sorting order",
                "schema" : {
                "type" : "string",
                "default" : "desc",
                "enum" : [ "asc", "desc" ]
                }
            }, {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultRoleAssignmentResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not Found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/biac/roles" : {
            "get" : {
            "tags" : [ "Roles" ],
            "summary" : "List Starburst built-in access control roles",
            "operationId" : "listRoles",
            "parameters" : [ {
                "name" : "pageToken",
                "in" : "query",
                "description" : "Page token",
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "pageSize",
                "in" : "query",
                "description" : "Page size",
                "schema" : {
                "maximum" : 512,
                "minimum" : 1,
                "type" : "string",
                "default" : "100"
                }
            }, {
                "name" : "pageSort",
                "in" : "query",
                "description" : "Sorting order",
                "schema" : {
                "type" : "string",
                "default" : "desc",
                "enum" : [ "asc", "desc" ]
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultRoleResponse"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            },
            "post" : {
            "tags" : [ "Roles" ],
            "summary" : "Create a Starburst built-in access control role",
            "operationId" : "createRole",
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "CreateRolePayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "RoleResponse"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/biac/roles/{roleId}" : {
            "get" : {
            "tags" : [ "Roles" ],
            "summary" : "Get a Starburst built-in access control role",
            "operationId" : "getRole",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultRoleResponse"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            },
            "put" : {
            "tags" : [ "Roles" ],
            "summary" : "Update a Starburst built-in access control role",
            "operationId" : "updateRole",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "CreateRolePayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "RoleResponse"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            },
            "delete" : {
            "tags" : [ "Roles" ],
            "summary" : "Delete a Starburst built-in access control role",
            "operationId" : "deleteRole",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "*/*" : { }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/biac/roles/{roleId}/rowFilters" : {
            "get" : {
            "tags" : [ "RowFilters" ],
            "summary" : "List all the rows filters of a role.",
            "operationId" : "listRoleRowFilters",
            "parameters" : [ {
                "name" : "pageToken",
                "in" : "query",
                "description" : "Page token",
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "pageSize",
                "in" : "query",
                "description" : "Page size",
                "schema" : {
                "maximum" : 512,
                "minimum" : 1,
                "type" : "string",
                "default" : "100"
                }
            }, {
                "name" : "pageSort",
                "in" : "query",
                "description" : "Sorting order",
                "schema" : {
                "type" : "string",
                "default" : "desc",
                "enum" : [ "asc", "desc" ]
                }
            }, {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultRowFilterResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            },
            "post" : {
            "tags" : [ "RowFilters" ],
            "summary" : "Add a row filter to a role to filter out table rows from queries made by subjects assigned to the role.",
            "operationId" : "addRowFilterToRole",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "RowFilterPayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "RowFilterResponse"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            }
        },
        "/api/v1/biac/roles/{roleId}/rowFilters/{rowFilterId}" : {
            "get" : {
            "tags" : [ "RowFilters" ],
            "summary" : "Get a row filter of a given role.",
            "operationId" : "getRowFilter",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            }, {
                "name" : "rowFilterId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "RowFilterResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            },
            "delete" : {
            "tags" : [ "RowFilters" ],
            "summary" : "Remove a row filter from a role.",
            "operationId" : "deleteRoleRowFilter",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            }, {
                "name" : "rowFilterId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "204" : {
                "description" : "No Content",
                "content" : {
                    "*/*" : { }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            }
            }
        },
        "/api/v1/biac/subjects/groups/{groupName}/assignments" : {
            "get" : {
            "tags" : [ "Subjects" ],
            "summary" : "Get all Starburst built-in access control roles assigned to the given group",
            "operationId" : "getRoleAssignmentsForGroup",
            "parameters" : [ {
                "name" : "pageToken",
                "in" : "query",
                "description" : "Page token",
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "pageSize",
                "in" : "query",
                "description" : "Page size",
                "schema" : {
                "maximum" : 512,
                "minimum" : 1,
                "type" : "string",
                "default" : "100"
                }
            }, {
                "name" : "pageSort",
                "in" : "query",
                "description" : "Sorting order",
                "schema" : {
                "type" : "string",
                "default" : "desc",
                "enum" : [ "asc", "desc" ]
                }
            }, {
                "name" : "groupName",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultSubjectRoleAssignmentResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            },
            "post" : {
            "tags" : [ "Subjects" ],
            "summary" : "Assign a Starburst built-in access control role to the given group",
            "operationId" : "createRoleAssignmentForGroup",
            "parameters" : [ {
                "name" : "groupName",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "SubjectRoleAssignmentPayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "SubjectRoleAssignmentResponse"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/biac/subjects/roles/{roleId}/assignments" : {
            "get" : {
            "tags" : [ "Subjects" ],
            "summary" : "Get all Starburst built-in access control roles assigned to the given role",
            "operationId" : "getRoleAssignmentsForRole",
            "parameters" : [ {
                "name" : "pageToken",
                "in" : "query",
                "description" : "Page token",
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "pageSize",
                "in" : "query",
                "description" : "Page size",
                "schema" : {
                "maximum" : 512,
                "minimum" : 1,
                "type" : "string",
                "default" : "100"
                }
            }, {
                "name" : "pageSort",
                "in" : "query",
                "description" : "Sorting order",
                "schema" : {
                "type" : "string",
                "default" : "desc",
                "enum" : [ "asc", "desc" ]
                }
            }, {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultSubjectRoleAssignmentResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            },
            "post" : {
            "tags" : [ "Subjects" ],
            "summary" : "Assign a Starburst built-in access control role to the given role",
            "operationId" : "createRoleAssignmentForRole",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "SubjectRoleAssignmentPayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "SubjectRoleAssignmentResponse"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/biac/subjects/users/{username}/assignments" : {
            "get" : {
            "tags" : [ "Subjects" ],
            "summary" : "Get all Starburst built-in access control roles assigned to the given user",
            "operationId" : "getRoleAssignmentsForUser",
            "parameters" : [ {
                "name" : "pageToken",
                "in" : "query",
                "description" : "Page token",
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "pageSize",
                "in" : "query",
                "description" : "Page size",
                "schema" : {
                "maximum" : 512,
                "minimum" : 1,
                "type" : "string",
                "default" : "100"
                }
            }, {
                "name" : "pageSort",
                "in" : "query",
                "description" : "Sorting order",
                "schema" : {
                "type" : "string",
                "default" : "desc",
                "enum" : [ "asc", "desc" ]
                }
            }, {
                "name" : "username",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "PaginatedResultSubjectRoleAssignmentResponse"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            },
            "post" : {
            "tags" : [ "Subjects" ],
            "summary" : "Assign a Starburst built-in access control role to the given user",
            "operationId" : "createRoleAssignmentForUser",
            "parameters" : [ {
                "name" : "username",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "SubjectRoleAssignmentPayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "SubjectRoleAssignmentResponse"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/biac/subjects/groups/{groupName}/assignments/{assignmentId}" : {
            "delete" : {
            "tags" : [ "Subjects" ],
            "summary" : "Delete an assignment to a Starburst built-in access control role from the given group",
            "operationId" : "deleteRoleAssignmentFromGroup",
            "parameters" : [ {
                "name" : "groupName",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "assignmentId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "*/*" : { }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/biac/subjects/roles/{roleId}/assignments/{assignmentId}" : {
            "delete" : {
            "tags" : [ "Subjects" ],
            "summary" : "Delete an assignment to a Starburst built-in access control role from the given role",
            "operationId" : "deleteRoleAssignmentFromRole",
            "parameters" : [ {
                "name" : "roleId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            }, {
                "name" : "assignmentId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "*/*" : { }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/biac/subjects/users/{username}/assignments/{assignmentId}" : {
            "delete" : {
            "tags" : [ "Subjects" ],
            "summary" : "Delete an assignment to a Starburst built-in access control role from the given user",
            "operationId" : "deleteRoleAssignmentFromUser",
            "parameters" : [ {
                "name" : "username",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string"
                }
            }, {
                "name" : "assignmentId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "integer",
                "format" : "int64"
                }
            } ],
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "*/*" : { }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "401" : {
                "description" : "Unauthorized"
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "ApiError"
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/dataProduct/domains" : {
            "get" : {
            "tags" : [ "Domains" ],
            "summary" : "List all data product domains",
            "operationId" : "listDomains",
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "type" : "array",
                        "items" : {
                        "$ref" : "Data domain"
                        }
                    }
                    }
                }
                }
            }
            },
            "post" : {
            "tags" : [ "Domains" ],
            "summary" : "Create a data product domain",
            "operationId" : "createDomain",
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "CreateDataDomainRequest"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "Data domain"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/domains/{dataDomainId}" : {
            "get" : {
            "tags" : [ "Domains" ],
            "summary" : "Get a data product domain by identifier",
            "operationId" : "getDomain",
            "parameters" : [ {
                "name" : "dataDomainId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "Data domain"
                    }
                    }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            },
            "put" : {
            "tags" : [ "Domains" ],
            "summary" : "Update a data product domain",
            "operationId" : "updateDomain",
            "parameters" : [ {
                "name" : "dataDomainId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "UpdateDataDomainRequest"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "Data domain"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            },
            "delete" : {
            "tags" : [ "Domains" ],
            "summary" : "Delete a data product domain",
            "operationId" : "deleteDomain",
            "parameters" : [ {
                "name" : "dataDomainId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "application/json" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/products/{dataProductId}/clone" : {
            "post" : {
            "tags" : [ "Data Products" ],
            "summary" : "Clone a data product",
            "description" : "Clone an existing data product within the same domain.  All datasets are cloned as well as tags and sample queries.",
            "operationId" : "cloneDataProduct",
            "parameters" : [ {
                "name" : "dataProductId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "CloneDataProductPayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "Data product"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : { }
                }
                },
                "409" : {
                "description" : "Conflict",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/products" : {
            "get" : {
            "tags" : [ "Data Products" ],
            "summary" : "Search for data products according to the searchOptions request parameter.",
            "description" : "This endpoint returns the first 100 data products matching the given searchOptions parameter. The number of results can be configured in the limit attribute of the searchOptions, up to a maximum of 1000.",
            "operationId" : "searchDataProducts",
            "parameters" : [ {
                "name" : "searchOptions",
                "in" : "query",
                "schema" : {
                "$ref" : "SearchOptionsParam"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "type" : "array",
                        "items" : {
                        "$ref" : "Data product summary"
                        }
                    }
                    }
                }
                }
            }
            },
            "post" : {
            "tags" : [ "Data Products" ],
            "summary" : "Create a data product",
            "description" : "This request creates a data product in a DRAFT status. At this stage the data product's schema and datasets are not yet available to be queried in SEP. It is only available for querying after it gets published, as part of the publishing workflow.",
            "operationId" : "createDataProduct",
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "DataProductPayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "Data product"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "409" : {
                "description" : "Conflict",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/products/{dataProductId}" : {
            "get" : {
            "tags" : [ "Data Products" ],
            "summary" : "Get a data product by identifier",
            "operationId" : "getDataProduct",
            "parameters" : [ {
                "name" : "dataProductId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "Data product"
                    }
                    }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            },
            "put" : {
            "tags" : [ "Data Products" ],
            "summary" : "Update a data product",
            "operationId" : "updateDataProduct",
            "parameters" : [ {
                "name" : "dataProductId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "DataProductPayload"
                    }
                }
                }
            },
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "Data product"
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : { }
                }
                },
                "409" : {
                "description" : "Conflict",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/products/{dataProductId}/materializedViews/{viewName}/refreshMetadata" : {
            "get" : {
            "tags" : [ "Data Products" ],
            "summary" : "Get refresh meta data about a materialized view that belongs to a data product",
            "operationId" : "getMaterializedViewRefreshMetadata",
            "parameters" : [ {
                "name" : "dataProductId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            }, {
                "name" : "viewName",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "Materialized view refresh metadata"
                    }
                    }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/openApi" : {
            "get" : {
            "tags" : [ "Data Products" ],
            "summary" : "Return the OpenAPI specification for the Data Product API.  Use Accept header of 'application/yaml' to request a YAML response instead of JSON.",
            "operationId" : "getOpenApi",
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/yaml" : { }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/dataProduct/catalogs" : {
            "get" : {
            "tags" : [ "Data Products" ],
            "summary" : "Return all catalogs suitable to store data products",
            "operationId" : "getTargetCatalogs",
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "type" : "array",
                        "items" : {
                        "$ref" : "CatalogDetails"
                        }
                    }
                    }
                }
                }
            },
            "security" : [ {
                "BasicAuth" : [ ]
            } ]
            }
        },
        "/api/v1/dataProduct/products/reassignDomain" : {
            "post" : {
            "tags" : [ "Data Products" ],
            "summary" : "Reassign the domain for a list of data products",
            "operationId" : "reassignDomainForDataProducts",
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "DomainReassignmentRequest"
                    }
                }
                }
            },
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "application/json" : { }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/products/{dataProductId}/sampleQueries" : {
            "get" : {
            "tags" : [ "Data Products" ],
            "summary" : "Get the sample queries for a data product",
            "operationId" : "listSampleQueries",
            "parameters" : [ {
                "name" : "dataProductId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "type" : "array",
                        "items" : {
                        "$ref" : "SampleQuery"
                        }
                    }
                    }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            },
            "put" : {
            "tags" : [ "Data Products" ],
            "summary" : "Update sample queries for a data product",
            "operationId" : "updateSampleQueries",
            "parameters" : [ {
                "name" : "dataProductId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "type" : "array",
                    "items" : {
                        "$ref" : "SampleQuery"
                    }
                    }
                }
                }
            },
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "application/json" : { }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/tags/{tagId}/products/{dataProductId}" : {
            "delete" : {
            "tags" : [ "Tags" ],
            "summary" : "Delete a tag from a specific data product",
            "operationId" : "deleteDataProductTag",
            "parameters" : [ {
                "name" : "tagId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            }, {
                "name" : "dataProductId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "*/*" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "*/*" : { }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/tags/{tagId}" : {
            "put" : {
            "tags" : [ "Tags" ],
            "summary" : "Update a specific tag",
            "operationId" : "updateTag",
            "parameters" : [ {
                "name" : "tagId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "DataProductTagValue"
                    }
                }
                }
            },
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "application/json" : { }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "*/*" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "*/*" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "*/*" : { }
                }
                }
            }
            },
            "delete" : {
            "tags" : [ "Tags" ],
            "summary" : "Delete an unused tag with a specific identifier",
            "operationId" : "deleteTag",
            "parameters" : [ {
                "name" : "tagId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "application/json" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "*/*" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "*/*" : { }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/tags/unused" : {
            "delete" : {
            "tags" : [ "Tags" ],
            "summary" : "Delete all unused tags",
            "operationId" : "deleteAllUnusedTags",
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/tags" : {
            "get" : {
            "tags" : [ "Tags" ],
            "summary" : "List all available tags for all data products",
            "operationId" : "listTags",
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "type" : "array",
                        "items" : {
                        "$ref" : "DataProductTag"
                        }
                    }
                    }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/tags/products/{dataProductId}" : {
            "get" : {
            "tags" : [ "Tags" ],
            "summary" : "List all tags associated with a specific data product",
            "operationId" : "getDataProductTags",
            "parameters" : [ {
                "name" : "dataProductId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "type" : "array",
                        "items" : {
                        "$ref" : "DataProductTag"
                        }
                    }
                    }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            },
            "put" : {
            "tags" : [ "Tags" ],
            "summary" : "Replace all tags for a specific data product with the supplied list of new tags",
            "operationId" : "updateDataProductTags",
            "parameters" : [ {
                "name" : "dataProductId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "requestBody" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "type" : "array",
                    "items" : {
                        "$ref" : "DataProductTagValue"
                    }
                    }
                }
                }
            },
            "responses" : {
                "204" : {
                "description" : "Success",
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "type" : "array",
                        "items" : {
                        "$ref" : "DataProductTag"
                        }
                    }
                    }
                }
                },
                "400" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/products/{dataProductId}/workflows/delete" : {
            "get" : {
            "tags" : [ "Workflows" ],
            "summary" : "Get the status of the async task to delete a data product.",
            "description" : "Clients must poll this endpoint until the attribute isFinalStatus in the response body is true.",
            "operationId" : "getDeleteDataProductStatus",
            "parameters" : [ {
                "name" : "dataProductId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "headers" : {
                    "Location" : {
                    "style" : "simple",
                    "schema" : {
                        "type" : "string",
                        "description" : "The endpoint to poll in order to GET the status of the operation",
                        "format" : "URL"
                    }
                    }
                },
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "DataProductWorkflowState"
                    }
                    }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "404" : {
                "description" : "No delete tasks are being processed for the data product",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            },
            "post" : {
            "tags" : [ "Workflows" ],
            "summary" : "Initiate an asynchronous task to delete the data product.",
            "description" : "This workflow attempts to delete the data product's schema and its views, or materialized views, from the underlying storage system. If the deletion succeeds the data product metadata is also deleted. This endpoint returns a success response if the async task is accepted by the server. Clients must poll the endpoint returned in the location header in order to follow the status of the async operation.",
            "operationId" : "deleteDataProduct",
            "parameters" : [ {
                "name" : "dataProductId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            }, {
                "name" : "skipTrinoDelete",
                "in" : "query",
                "description" : "If true, just delete from the data product DB, don't delete any tables or schemas from Trino",
                "allowEmptyValue" : true,
                "schema" : {
                "type" : "boolean"
                }
            } ],
            "responses" : {
                "202" : {
                "description" : "Accepted",
                "headers" : {
                    "Location" : {
                    "style" : "simple",
                    "schema" : {
                        "type" : "string",
                        "description" : "The endpoint to poll in order to GET the status of the operation.",
                        "format" : "URL"
                    }
                    }
                },
                "content" : {
                    "application/json" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "*/*" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "*/*" : { }
                }
                }
            }
            }
        },
        "/api/v1/dataProduct/products/{dataProductId}/workflows/publish" : {
            "get" : {
            "tags" : [ "Workflows" ],
            "summary" : "Get the status of the async task that publishes a data product.",
            "description" : "Clients must poll this endpoint until the attribute isFinalStatus in the response body is true.",
            "operationId" : "getPublishDataProductStatus",
            "parameters" : [ {
                "name" : "dataProductId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            } ],
            "responses" : {
                "200" : {
                "description" : "Success",
                "headers" : {
                    "Location" : {
                    "style" : "simple",
                    "schema" : {
                        "type" : "string",
                        "description" : "The endpoint to poll in order to GET the status of the operation.  If task is finished, this will return endpoint for getting the data product.",
                        "format" : "URL"
                    }
                    }
                },
                "content" : {
                    "application/json" : {
                    "schema" : {
                        "$ref" : "DataProductWorkflowState"
                    }
                    }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : { }
                }
                },
                "404" : {
                "description" : "No publish tasks are being processed for the data product",
                "content" : {
                    "application/json" : { }
                }
                }
            }
            },
            "post" : {
            "tags" : [ "Workflows" ],
            "summary" : "Publish the data product by initiating an asynchronous task to populate the views, or materialized views, in the schema.",
            "description" : "The publish workflow creates the data product as a schema in the data product's catalog using the domain schema location if provided, or the catalog's default schema location. The datasets are created as views or materialized views in that schema, according to their types. If completed successfully, the data product status transitions to PUBLISHED. This endpoint returns a success response if the async task is accepted by the server. Clients must poll the endpoint returned in the location header in order to follow the status of the async operation.",
            "operationId" : "publishDataProduct",
            "parameters" : [ {
                "name" : "dataProductId",
                "in" : "path",
                "required" : true,
                "schema" : {
                "type" : "string",
                "format" : "uuid"
                }
            }, {
                "name" : "force",
                "in" : "query",
                "description" : "If true the data product will be republished, even if it is already published, and all its datasets will be recreated",
                "schema" : {
                "type" : "boolean"
                }
            } ],
            "responses" : {
                "202" : {
                "description" : "Accepted",
                "headers" : {
                    "Location" : {
                    "style" : "simple",
                    "schema" : {
                        "type" : "string",
                        "description" : "The endpoint to poll in order to GET the status of the operation.",
                        "format" : "URL"
                    }
                    }
                },
                "content" : {
                    "application/json" : { }
                }
                },
                "403" : {
                "description" : "Forbidden",
                "content" : {
                    "*/*" : { }
                }
                },
                "404" : {
                "description" : "Not found",
                "content" : {
                    "*/*" : { }
                }
                }
            }
            }
        }
        },
        "components" : {
        "schemas" : {
            "Action" : {
            "type" : "string",
            "description" : "Grant action (SHOW, DROP, etc.)",
            "enum" : [ "SHOW", "CREATE", "ALTER", "DROP", "EXECUTE", "SELECT", "INSERT", "DELETE", "UPDATE", "REFRESH", "IMPERSONATE", "UI", "KILL", "SET", "PUBLISH", "EDIT" ]
            },
            "ApiError" : {
            "type" : "object",
            "properties" : {
                "errorCode" : {
                "$ref" : "ErrorCode"
                },
                "message" : {
                "type" : "string"
                },
                "detailsType" : {
                "type" : "string"
                },
                "details" : {
                "$ref" : "ErrorDetailType"
                }
            }
            },
            "Attribute" : {
            "type" : "object",
            "properties" : {
                "key" : {
                "type" : "string"
                },
                "value" : {
                "type" : "string"
                }
            }
            },
            "ConflictGrant" : {
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "integer",
                "format" : "int64"
                },
                "oldGrant" : {
                "$ref" : "GrantDto"
                },
                "newGrant" : {
                "$ref" : "GrantDto"
                }
            }
            },
            "ConflictingAndDuplicateGrants" : {
            "type" : "object",
            "allOf" : [ {
                "$ref" : "ErrorDetailType"
            }, {
                "type" : "object",
                "properties" : {
                "conflictingGrants" : {
                    "uniqueItems" : true,
                    "type" : "array",
                    "items" : {
                    "$ref" : "ConflictGrant"
                    }
                },
                "duplicateGrants" : {
                    "uniqueItems" : true,
                    "type" : "array",
                    "items" : {
                    "$ref" : "PersistedGrantDto"
                    }
                }
                }
            } ]
            },
            "Effect" : {
            "type" : "string",
            "description" : "Grant effect (ALLOW, ALLOW_WITH_GRANT_OPTION, and DENY)",
            "enum" : [ "ALLOW", "ALLOW_WITH_GRANT_OPTION", "DENY" ]
            },
            "EntityDto" : {
            "type" : "object",
            "properties" : {
                "attributes" : {
                "uniqueItems" : true,
                "type" : "array",
                "items" : {
                    "$ref" : "Attribute"
                }
                },
                "printableValue" : {
                "$ref" : "EntityPrintableValueDto"
                }
            }
            },
            "EntityIdentifier" : {
            "type" : "object",
            "allOf" : [ {
                "$ref" : "ErrorDetailType"
            }, {
                "type" : "object",
                "properties" : {
                "entityType" : {
                    "$ref" : "EntityType"
                },
                "entityId" : {
                    "type" : "object"
                },
                "entityName" : {
                    "type" : "string"
                }
                }
            } ]
            },
            "EntityPrintableValueDto" : {
            "type" : "object",
            "properties" : {
                "entityText" : {
                "type" : "string"
                },
                "specified" : {
                "type" : "boolean"
                }
            }
            },
            "EntityType" : {
            "type" : "string",
            "enum" : [ "AUDIT_LOG", "COLUMN_MASK", "COLUMN_MASK_EXPRESSION", "DATA_PRODUCT", "GRANT", "ROLE", "ROLE_ASSIGNMENT", "ROW_FILTER", "ROW_FILTER_EXPRESSION", "DIAGNOSTICS" ]
            },
            "ErrorCode" : {
            "type" : "string",
            "enum" : [ "INVALID_ARGUMENT", "NOT_SUPPORTED", "SQL_SYNTAX_ERROR", "PERMISSION_DENIED", "NOT_FOUND", "ENTITY_NOT_FOUND", "ALREADY_EXISTS", "INTERNAL_ERROR" ]
            },
            "ErrorDetailType" : {
            "type" : "object",
            "properties" : {
                "type" : {
                "type" : "string"
                }
            },
            "discriminator" : {
                "propertyName" : "type"
            }
            },
            "GrantDto" : {
            "type" : "object",
            "properties" : {
                "subject" : {
                "$ref" : "Subject"
                },
                "action" : {
                "$ref" : "Action"
                },
                "entity" : {
                "$ref" : "EntityDto"
                },
                "effect" : {
                "$ref" : "Effect"
                }
            }
            },
            "GrantError" : {
            "type" : "object",
            "allOf" : [ {
                "$ref" : "ErrorDetailType"
            }, {
                "type" : "object",
                "properties" : {
                "roleId" : {
                    "type" : "integer",
                    "format" : "int64"
                },
                "reason" : {
                    "$ref" : "Reason"
                }
                }
            } ]
            },
            "MoreDetailsString" : {
            "type" : "object",
            "allOf" : [ {
                "$ref" : "ErrorDetailType"
            }, {
                "type" : "object",
                "properties" : {
                "message" : {
                    "type" : "string"
                }
                }
            } ]
            },
            "PersistedGrantDto" : {
            "type" : "object",
            "properties" : {
                "object" : {
                "$ref" : "GrantDto"
                },
                "id" : {
                "type" : "integer",
                "format" : "int64"
                }
            }
            },
            "Reason" : {
            "type" : "string",
            "enum" : [ "DUPLICATE", "CONFLICT" ]
            },
            "SqlParsingError" : {
            "type" : "object",
            "allOf" : [ {
                "$ref" : "ErrorDetailType"
            }, {
                "type" : "object",
                "properties" : {
                "datasetName" : {
                    "type" : "string"
                },
                "lineNumber" : {
                    "type" : "integer",
                    "format" : "int32"
                },
                "columnNumber" : {
                    "type" : "integer",
                    "format" : "int32"
                }
                }
            } ]
            },
            "Subject" : {
            "type" : "object",
            "properties" : {
                "attributes" : {
                "uniqueItems" : true,
                "type" : "array",
                "items" : {
                    "$ref" : "Attribute"
                }
                },
                "user" : {
                "type" : "string"
                },
                "subjectRoleId" : {
                "type" : "integer",
                "format" : "int64"
                },
                "empty" : {
                "type" : "boolean"
                },
                "keys" : {
                "uniqueItems" : true,
                "type" : "array",
                "items" : {
                    "type" : "string"
                }
                },
                "onlyAttribute" : {
                "$ref" : "Attribute"
                }
            }
            },
            "AccessLogResponse" : {
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "integer",
                "format" : "int64"
                },
                "queryId" : {
                "type" : "string",
                "description" : "ID of the query that generated this access log"
                },
                "action" : {
                "type" : "string",
                "description" : "The action for which access was requested, or (ANY) if action was not specified"
                },
                "entityCategory" : {
                "type" : "string",
                "description" : "Category of the entity to which access was requested"
                },
                "entity" : {
                "type" : "string",
                "description" : "Entity to which access was requested"
                },
                "entitySpecified" : {
                "type" : "boolean",
                "description" : "If true, access was requested to a specific entity, otherwise access was requested to all entities of a given category"
                },
                "grantOption" : {
                "type" : "boolean",
                "description" : "If true, the requester has WITH GRANT OPTION grant for the given entity"
                },
                "accessResult" : {
                "$ref" : "AuditAccessResult"
                },
                "user" : {
                "type" : "string",
                "description" : "Session User"
                },
                "enabledRoles" : {
                "uniqueItems" : true,
                "type" : "array",
                "description" : "Roles enabled on the session",
                "items" : {
                    "type" : "string",
                    "description" : "Roles enabled on the session"
                }
                },
                "atTime" : {
                "type" : "string",
                "description" : "When access was requested",
                "format" : "date-time"
                }
            },
            "description" : "Details information about a single entry in the access log"
            },
            "AuditAccessResult" : {
            "type" : "string",
            "enum" : [ "ALLOW", "DENY", "ROW_FILTER", "COLUMN_MASK" ]
            },
            "PaginatedResultAccessLogResponse" : {
            "type" : "object",
            "properties" : {
                "nextPageToken" : {
                "type" : "string",
                "description" : "If there are more pages to the result, this contains the token used to retrieve the next page."
                },
                "result" : {
                "type" : "array",
                "description" : "The current page of results.",
                "items" : {
                    "$ref" : "AccessLogResponse"
                }
                }
            },
            "description" : "Container for paginated results"
            },
            "ChangeLogResponse" : {
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "integer",
                "format" : "int64"
                },
                "queryId" : {
                "type" : "string",
                "description" : "ID of the query that made the change"
                },
                "operation" : {
                "type" : "string",
                "description" : "Type of the change"
                },
                "entityKind" : {
                "type" : "string",
                "description" : "Kind of the entity that the change relates to"
                },
                "whatChanged" : {
                "type" : "string",
                "description" : "Description of what has changed"
                },
                "entity" : {
                "type" : "string",
                "description" : "Text representation of the entity that the change relates to"
                },
                "entitySpecified" : {
                "type" : "boolean",
                "description" : "If true, the change applies to a specific entity, otherwise the change applies to all entities of the given kind"
                },
                "grantOption" : {
                "type" : "boolean",
                "description" : "If true, GRANT OPTION applies to the affected role for the related entity"
                },
                "affectedRole" : {
                "type" : "string",
                "description" : "Name of the role that was affected by this change"
                },
                "user" : {
                "type" : "string",
                "description" : "Session user that has made this change"
                },
                "enabledRoles" : {
                "uniqueItems" : true,
                "type" : "array",
                "description" : "Roles enabled on the session that has made this change",
                "items" : {
                    "type" : "string",
                    "description" : "Roles enabled on the session that has made this change"
                }
                },
                "atTime" : {
                "type" : "string",
                "description" : "When this change was made",
                "format" : "date-time"
                }
            },
            "description" : "Details information about a single entry in the change log"
            },
            "PaginatedResultChangeLogResponse" : {
            "type" : "object",
            "properties" : {
                "nextPageToken" : {
                "type" : "string",
                "description" : "If there are more pages to the result, this contains the token used to retrieve the next page."
                },
                "result" : {
                "type" : "array",
                "description" : "The current page of results.",
                "items" : {
                    "$ref" : "ChangeLogResponse"
                }
                }
            },
            "description" : "Container for paginated results"
            },
            "CatalogKeyEntityData" : {
            "type" : "object",
            "description" : "Data of a catalog key entity",
            "allOf" : [ {
                "$ref" : "EntityModel"
            }, {
                "type" : "object",
                "properties" : {
                "catalog" : {
                    "type" : "string",
                    "description" : "If empty it applies to all catalogs"
                },
                "entityKey" : {
                    "type" : "string",
                    "description" : "If empty it applies to all entities of the given category in the entity's catalog"
                }
                }
            } ]
            },
            "ColumnMaskResponse" : {
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "integer",
                "description" : "Id of the column mask applied to a role.",
                "format" : "int64"
                },
                "entity" : {
                "$ref" : "EntityModel"
                },
                "expressionId" : {
                "type" : "integer",
                "description" : "Id of the columm mask expression.",
                "format" : "int64"
                },
                "forceNone" : {
                "type" : "boolean",
                "description" : "If true, forces not masking column values for the given entity, even if the subject is assigned to other roles with column masks to the same entity."
                }
            },
            "description" : "Detailed data for a column mask added to a role"
            },
            "DataProductEntityData" : {
            "type" : "object",
            "description" : "Data of a data product entity",
            "allOf" : [ {
                "$ref" : "EntityModel"
            }, {
                "type" : "object",
                "properties" : {
                "domainName" : {
                    "type" : "string",
                    "description" : "If empty it applies to all domains"
                },
                "dataProductName" : {
                    "type" : "string",
                    "description" : "If empty it applies to all data products in the entity's domain"
                }
                }
            } ]
            },
            "EntityModel" : {
            "type" : "object",
            "properties" : {
                "category" : {
                "type" : "string",
                "description" : "TABLES, FUNCTIONS, etc."
                },
                "allEntities" : {
                "type" : "boolean",
                "description" : "Is the entity representing all entities of the given category"
                }
            },
            "description" : "Entity type",
            "discriminator" : {
                "propertyName" : "category",
                "mapping" : {
                "TABLES" : "TableEntityData",
                "SYSTEM_SESSION_PROPERTIES" : "SingleKeyEntityData",
                "ROLES" : "SingleKeyEntityData",
                "USERS" : "SingleKeyEntityData",
                "FUNCTIONS" : "FunctionEntityData",
                "PROCEDURES" : "ProcedureEntityData",
                "CATALOG_SESSION_PROPERTIES" : "CatalogKeyEntityData",
                "QUERIES" : "GlobalEntityData",
                "AUDIT_LOGS" : "GlobalEntityData",
                "DATA_PRODUCTS" : "DataProductEntityData",
                "TABLE_PROPERTIES" : "PropertyEntityData",
                "SCHEMA_PROPERTIES" : "PropertyEntityData"
                }
            },
            "oneOf" : [ {
                "$ref" : "TableEntityData"
            } ]
            },
            "FunctionEntityData" : {
            "type" : "object",
            "description" : "Data of a function entity",
            "allOf" : [ {
                "$ref" : "EntityModel"
            }, {
                "type" : "object",
                "properties" : {
                "catalog" : {
                    "type" : "string",
                    "description" : "If empty it applies to all catalogs"
                },
                "schema" : {
                    "type" : "string",
                    "description" : "If empty it applies to all schemas of the entity's catalog"
                },
                "function" : {
                    "type" : "string",
                    "description" : "If empty it applies to all functions of the entity's schema"
                }
                }
            } ]
            },
            "GlobalEntityData" : {
            "type" : "object",
            "description" : "Data of a global entity",
            "allOf" : [ {
                "$ref" : "EntityModel"
            } ]
            },
            "ProcedureEntityData" : {
            "type" : "object",
            "description" : "Data of a procedure entity",
            "allOf" : [ {
                "$ref" : "EntityModel"
            }, {
                "type" : "object",
                "properties" : {
                "catalog" : {
                    "type" : "string",
                    "description" : "If empty it applies to all catalogs"
                },
                "schema" : {
                    "type" : "string",
                    "description" : "If empty it applies to all schemas of the entity's catalog"
                },
                "procedure" : {
                    "type" : "string",
                    "description" : "If empty it applies to all procedures of the entity's schema"
                }
                }
            } ]
            },
            "PropertyEntityData" : {
            "type" : "object",
            "description" : "Data of a table or schema property entity",
            "allOf" : [ {
                "$ref" : "EntityModel"
            }, {
                "type" : "object",
                "properties" : {
                "catalog" : {
                    "type" : "string",
                    "description" : "If empty it applies to all catalogs"
                },
                "schema" : {
                    "type" : "string",
                    "description" : "If empty it applies to all schemas of the entity's catalog"
                },
                "table" : {
                    "type" : "string",
                    "description" : "If empty it applies to all tables of the entity's schema"
                },
                "property" : {
                    "type" : "string",
                    "description" : "If empty it applies to all properties of the entity's table or schema"
                },
                "value" : {
                    "type" : "string",
                    "description" : "If empty it applies to all property values"
                }
                }
            } ]
            },
            "SingleKeyEntityData" : {
            "type" : "object",
            "description" : "Data of a single key entity",
            "allOf" : [ {
                "$ref" : "EntityModel"
            }, {
                "type" : "object",
                "properties" : {
                "entityKey" : {
                    "type" : "string",
                    "description" : "If empty it applies to all entities of the given category"
                }
                }
            } ]
            },
            "TableEntityData" : {
            "type" : "object",
            "description" : "Data of a table entity",
            "allOf" : [ {
                "$ref" : "EntityModel"
            }, {
                "type" : "object",
                "properties" : {
                "catalog" : {
                    "type" : "string",
                    "description" : "If empty it applies to all catalogs"
                },
                "schema" : {
                    "type" : "string",
                    "description" : "If empty it applies to all schemas of the entity's catalog"
                },
                "table" : {
                    "type" : "string",
                    "description" : "If empty it applies to all tables of the entity's schema"
                },
                "columns" : {
                    "uniqueItems" : true,
                    "type" : "array",
                    "description" : "If empty it applies to all columns of the entity's table",
                    "items" : {
                    "type" : "string",
                    "description" : "If empty it applies to all columns of the entity's table"
                    }
                }
                }
            } ]
            },
            "ColumnMaskPayload" : {
            "required" : [ "entity", "expressionId" ],
            "type" : "object",
            "properties" : {
                "entity" : {
                "$ref" : "TableEntityData"
                },
                "expressionId" : {
                "type" : "integer",
                "description" : "Id of the column mask expression to apply in the given entity",
                "format" : "int64"
                }
            },
            "description" : "Data for a role column mask"
            },
            "PaginatedResultColumnMaskResponse" : {
            "type" : "object",
            "properties" : {
                "nextPageToken" : {
                "type" : "string",
                "description" : "If there are more pages to the result, this contains the token used to retrieve the next page."
                },
                "result" : {
                "type" : "array",
                "description" : "The current page of results.",
                "items" : {
                    "$ref" : "ColumnMaskResponse"
                }
                }
            },
            "description" : "Container for paginated results"
            },
            "EntityCategory" : {
            "type" : "string",
            "description" : "The current page of results.",
            "enum" : [ "TABLES", "SCHEMA_PROPERTIES", "TABLE_PROPERTIES", "SYSTEM_SESSION_PROPERTIES", "CATALOG_SESSION_PROPERTIES", "FUNCTIONS", "PROCEDURES", "QUERIES", "ROLES", "USERS", "ANNOTATIONS", "DATA_PRODUCTS", "AUDIT_LOGS", "USER_INTERFACE", "WORKSHEETS" ]
            },
            "PaginatedResultEntityCategory" : {
            "type" : "object",
            "properties" : {
                "nextPageToken" : {
                "type" : "string",
                "description" : "If there are more pages to the result, this contains the token used to retrieve the next page."
                },
                "result" : {
                "type" : "array",
                "description" : "The current page of results.",
                "items" : {
                    "$ref" : "EntityCategory"
                }
                }
            },
            "description" : "Container for paginated results"
            },
            "PaginatedResultAction" : {
            "type" : "object",
            "properties" : {
                "nextPageToken" : {
                "type" : "string",
                "description" : "If there are more pages to the result, this contains the token used to retrieve the next page."
                },
                "result" : {
                "type" : "array",
                "description" : "The current page of results.",
                "items" : {
                    "$ref" : "Action"
                }
                }
            },
            "description" : "Container for paginated results"
            },
            "ExpressionResponse" : {
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "integer",
                "description" : "Expression id",
                "format" : "int64"
                },
                "name" : {
                "type" : "string",
                "description" : "Expression name"
                },
                "expression" : {
                "type" : "string",
                "description" : "Expression definition in SQL"
                },
                "description" : {
                "type" : "string",
                "description" : "Optional expression description"
                }
            }
            },
            "ExpressionPayload" : {
            "type" : "object",
            "properties" : {
                "name" : {
                "type" : "string",
                "description" : "Expression name"
                },
                "expression" : {
                "type" : "string",
                "description" : "Expression definition in SQL"
                },
                "description" : {
                "type" : "string",
                "description" : "Optional expression description"
                }
            }
            },
            "PaginatedResultExpressionResponse" : {
            "type" : "object",
            "properties" : {
                "nextPageToken" : {
                "type" : "string",
                "description" : "If there are more pages to the result, this contains the token used to retrieve the next page."
                },
                "result" : {
                "type" : "array",
                "description" : "The current page of results.",
                "items" : {
                    "$ref" : "ExpressionResponse"
                }
                }
            },
            "description" : "Container for paginated results"
            },
            "GrantResponse" : {
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "integer",
                "description" : "Grant ID",
                "format" : "int64"
                },
                "effect" : {
                "$ref" : "Effect"
                },
                "action" : {
                "$ref" : "Action"
                },
                "entity" : {
                "$ref" : "EntityModel"
                }
            },
            "description" : "Information about a grant"
            },
            "CreateGrantPayload" : {
            "type" : "object",
            "properties" : {
                "effect" : {
                "$ref" : "Effect"
                },
                "action" : {
                "$ref" : "Action"
                },
                "entity" : {
                "$ref" : "EntityModel"
                }
            },
            "description" : "Data of a grant to be created"
            },
            "PaginatedResultGrantResponse" : {
            "type" : "object",
            "properties" : {
                "nextPageToken" : {
                "type" : "string",
                "description" : "If there are more pages to the result, this contains the token used to retrieve the next page."
                },
                "result" : {
                "type" : "array",
                "description" : "The current page of results.",
                "items" : {
                    "$ref" : "GrantResponse"
                }
                }
            },
            "description" : "Container for paginated results"
            },
            "GroupSubjectData" : {
            "required" : [ "groupName" ],
            "type" : "object",
            "description" : "Data of a group subject",
            "allOf" : [ {
                "$ref" : "SubjectData"
            }, {
                "type" : "object",
                "properties" : {
                "groupName" : {
                    "type" : "string"
                }
                }
            } ]
            },
            "RoleAssignmentResponse" : {
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "integer",
                "description" : "ID of the role assignment",
                "format" : "int64"
                },
                "subject" : {
                "$ref" : "SubjectData"
                },
                "roleAdmin" : {
                "type" : "boolean",
                "description" : "If true the subject has an admin option for the assigned role"
                }
            },
            "description" : "Response from assigning roles"
            },
            "RoleSubjectData" : {
            "required" : [ "roleId" ],
            "type" : "object",
            "description" : "Data of a role subject",
            "allOf" : [ {
                "$ref" : "SubjectData"
            }, {
                "type" : "object",
                "properties" : {
                "roleId" : {
                    "type" : "integer",
                    "format" : "int64"
                }
                }
            } ]
            },
            "SubjectData" : {
            "required" : [ "type" ],
            "type" : "object",
            "properties" : {
                "type" : {
                "type" : "string",
                "description" : "Subject type (USER, GROUP, and ROLE)"
                }
            },
            "description" : "Subject to which the role is assigned. If empty the role is assigned to all.",
            "discriminator" : {
                "propertyName" : "type",
                "mapping" : {
                "USER" : "UserSubjectData",
                "GROUP" : "GroupSubjectData",
                "ROLE" : "RoleSubjectData"
                }
            }
            },
            "UserSubjectData" : {
            "required" : [ "username" ],
            "type" : "object",
            "description" : "Data of a user subject",
            "allOf" : [ {
                "$ref" : "SubjectData"
            }, {
                "type" : "object",
                "properties" : {
                "username" : {
                    "type" : "string"
                }
                }
            } ]
            },
            "PaginatedResultRoleAssignmentResponse" : {
            "type" : "object",
            "properties" : {
                "nextPageToken" : {
                "type" : "string",
                "description" : "If there are more pages to the result, this contains the token used to retrieve the next page."
                },
                "result" : {
                "type" : "array",
                "description" : "The current page of results.",
                "items" : {
                    "$ref" : "RoleAssignmentResponse"
                }
                }
            },
            "description" : "Container for paginated results"
            },
            "RoleResponse" : {
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "integer",
                "description" : "Role ID",
                "format" : "int64"
                },
                "name" : {
                "type" : "string",
                "description" : "Role name"
                },
                "description" : {
                "type" : "string",
                "description" : "Role description"
                }
            },
            "description" : "Information about a role"
            },
            "CreateRolePayload" : {
            "type" : "object",
            "properties" : {
                "name" : {
                "type" : "string",
                "description" : "Role name"
                },
                "description" : {
                "type" : "string",
                "description" : "Role description"
                }
            },
            "description" : "Data of a role"
            },
            "PaginatedResultRoleResponse" : {
            "type" : "object",
            "properties" : {
                "nextPageToken" : {
                "type" : "string",
                "description" : "If there are more pages to the result, this contains the token used to retrieve the next page."
                },
                "result" : {
                "type" : "array",
                "description" : "The current page of results.",
                "items" : {
                    "$ref" : "RoleResponse"
                }
                }
            },
            "description" : "Container for paginated results"
            },
            "RowFilterResponse" : {
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "integer",
                "description" : "Id of the row filter applied to a role.",
                "format" : "int64"
                },
                "entity" : {
                "$ref" : "EntityModel"
                },
                "expressionId" : {
                "type" : "integer",
                "description" : "Id of the row filter expression.",
                "format" : "int64"
                },
                "forceNone" : {
                "type" : "boolean",
                "description" : "If true, forces not filtering table rows for the given entity, even if the subject is assigned to other roles with row filters to the same entity."
                }
            },
            "description" : "Detailed data for a row filter added to a role"
            },
            "RowFilterPayload" : {
            "required" : [ "entity", "expressionId" ],
            "type" : "object",
            "properties" : {
                "entity" : {
                "$ref" : "TableEntityData"
                },
                "expressionId" : {
                "type" : "integer",
                "description" : "Id of the row filter expression to apply in the given entity",
                "format" : "int64"
                }
            },
            "description" : "Data for a role row filter"
            },
            "PaginatedResultRowFilterResponse" : {
            "type" : "object",
            "properties" : {
                "nextPageToken" : {
                "type" : "string",
                "description" : "If there are more pages to the result, this contains the token used to retrieve the next page."
                },
                "result" : {
                "type" : "array",
                "description" : "The current page of results.",
                "items" : {
                    "$ref" : "RowFilterResponse"
                }
                }
            },
            "description" : "Container for paginated results"
            },
            "SubjectRoleAssignmentResponse" : {
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "integer",
                "description" : "ID of the role assignment",
                "format" : "int64"
                },
                "roleId" : {
                "type" : "integer",
                "description" : "ID of the role assigned to the subject",
                "format" : "int64"
                },
                "roleAdmin" : {
                "type" : "boolean",
                "description" : "If true the subject has an admin option for the assigned role"
                }
            },
            "description" : "The current page of results."
            },
            "SubjectRoleAssignmentPayload" : {
            "required" : [ "roleId" ],
            "type" : "object",
            "properties" : {
                "roleId" : {
                "type" : "integer",
                "description" : "ID of the role to assign to the subject",
                "format" : "int64"
                },
                "roleAdmin" : {
                "type" : "boolean",
                "description" : "If true the subject will have an admin option for the assigned role"
                }
            }
            },
            "PaginatedResultSubjectRoleAssignmentResponse" : {
            "type" : "object",
            "properties" : {
                "nextPageToken" : {
                "type" : "string",
                "description" : "If there are more pages to the result, this contains the token used to retrieve the next page."
                },
                "result" : {
                "type" : "array",
                "description" : "The current page of results.",
                "items" : {
                    "$ref" : "SubjectRoleAssignmentResponse"
                }
                }
            },
            "description" : "Container for paginated results"
            },
            "Data domain" : {
            "required" : [ "assignedDataProducts", "createdAt", "createdBy", "id", "name", "updatedAt", "updatedBy" ],
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "string",
                "description" : "Domain UUID.",
                "format" : "uuid"
                },
                "name" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "Name of the domain."
                },
                "description" : {
                "type" : "string",
                "description" : "Domain description."
                },
                "schemaLocation" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "URI describing the location where to create the schema for the data products of this domain. If left empty, the default schema location for the data product's target catalog will be used.",
                "format" : "uri"
                },
                "assignedDataProducts" : {
                "type" : "array",
                "description" : "List of the data products that are assigned to this domain.",
                "items" : {
                    "$ref" : "DataProductSummary"
                }
                },
                "createdBy" : {
                "type" : "string",
                "description" : "Name of the user who created this domain."
                },
                "createdAt" : {
                "type" : "string",
                "description" : "Timestamp of when this domain was created.",
                "format" : "date-time"
                },
                "updatedAt" : {
                "type" : "string",
                "description" : "Timestamp of when this domain was last updated. This is initialized to createdAt.",
                "format" : "date-time"
                },
                "updatedBy" : {
                "type" : "string",
                "description" : "Name of the user who last updated this domain.  This is initialized to createdBy"
                }
            },
            "description" : "Detailed data describing a data product domain"
            },
            "DataProductSummary" : {
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "string",
                "format" : "uuid"
                },
                "name" : {
                "type" : "string"
                }
            },
            "description" : "List of the data products that are assigned to this domain."
            },
            "CreateDataDomainRequest" : {
            "required" : [ "name" ],
            "type" : "object",
            "properties" : {
                "name" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "Name of the domain.",
                "example" : "Marketing"
                },
                "description" : {
                "type" : "string",
                "description" : "Domain description.",
                "example" : "This domain holds data published by the marketing team."
                },
                "schemaLocation" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "URI describing the location where to create the schema for the data products of this domain. If left empty, the default schema location for the data product's target catalog is used.",
                "format" : "uri",
                "example" : "s3://my-bucket/marketing/"
                }
            },
            "description" : "Data for creating a data product domain"
            },
            "UpdateDataDomainRequest" : {
            "type" : "object",
            "properties" : {
                "description" : {
                "type" : "string",
                "description" : "Domain description."
                },
                "schemaLocation" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "URI describing the location where to create the schema for the data products of this domain. If left empty, the default schema location for the data product's target catalog will be used.",
                "format" : "uri"
                }
            },
            "description" : "Data for updating a data product domain"
            },
            "AccessMetadata" : {
            "type" : "object",
            "properties" : {
                "lastQueriedAt" : {
                "type" : "string",
                "description" : "Timestamp when this data product was last queried",
                "format" : "date-time"
                },
                "lastQueriedBy" : {
                "type" : "string",
                "description" : "User who last queried this data product"
                }
            },
            "description" : "Access metadata for a data product"
            },
            "ColumnDocumentation" : {
            "required" : [ "description", "name", "type" ],
            "type" : "object",
            "properties" : {
                "name" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "Name of the column.",
                "example" : "region_name"
                },
                "type" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "Type of the column.",
                "example" : "text"
                },
                "description" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "Column description.",
                "example" : "Name of the geographic region associated with this data."
                }
            },
            "description" : "Definition of a dataset column"
            },
            "Data product" : {
            "required" : [ "userData" ],
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "string",
                "description" : "Data product UUID",
                "format" : "uuid"
                },
                "name" : {
                "maxLength" : 40,
                "minLength" : 1,
                "type" : "string",
                "description" : "Data product name."
                },
                "catalogName" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "Catalog to store this data product."
                },
                "schemaName" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "Trino schema name that will be generated for this data product."
                },
                "dataDomainId" : {
                "type" : "string",
                "description" : "UUID of the domain that this data product belongs to.",
                "format" : "uuid"
                },
                "summary" : {
                "maxLength" : 150,
                "type" : "string",
                "description" : "Summary description for this data product."
                },
                "description" : {
                "type" : "string",
                "description" : "Description for this data product."
                },
                "createdBy" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "User who created this data product."
                },
                "status" : {
                "$ref" : "DataProductStatus"
                },
                "views" : {
                "type" : "array",
                "description" : "View datasets for this data product.",
                "items" : {
                    "$ref" : "ViewDataset"
                }
                },
                "materializedViews" : {
                "type" : "array",
                "description" : "Materialized views for this data product.",
                "items" : {
                    "$ref" : "MaterializedViewDataset"
                }
                },
                "owners" : {
                "type" : "array",
                "writeOnly" : true,
                "items" : {
                    "$ref" : "DataProductOwner"
                }
                },
                "relevantLinks" : {
                "type" : "array",
                "description" : "Relevant links for this data product.",
                "items" : {
                    "$ref" : "RelevantLink"
                }
                },
                "createdAt" : {
                "type" : "string",
                "description" : "Timestamp of when this data product was created.",
                "format" : "date-time"
                },
                "updatedAt" : {
                "type" : "string",
                "description" : "Timestamp of when this data product was last updated.  Will be initialized to createdAt timestamp.",
                "format" : "date-time"
                },
                "updatedBy" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "User who last updated this data product."
                },
                "publishedAt" : {
                "type" : "string",
                "description" : "Timestamp of when this data product was last published.",
                "format" : "date-time"
                },
                "publishedBy" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "User who published this data product."
                },
                "accessMetadata" : {
                "$ref" : "AccessMetadata"
                },
                "ratingsAverage" : {
                "maximum" : 5,
                "minimum" : 1,
                "type" : "number",
                "description" : "Average user rating of this data product.  If empty then this data product has not been rated yet.",
                "format" : "float"
                },
                "ratingsCount" : {
                "type" : "integer",
                "description" : "Number of user ratings of this data product.",
                "format" : "int32"
                },
                "userData" : {
                "$ref" : "DataProductUserData"
                },
                "matchesTrinoDefinition" : {
                "type" : "boolean",
                "description" : "If published, this value is true if data product is in sync with what's created in Trino for all its components. Only set if the logged user has the permissions to query the Trino definitions for all datasets (Data Product Catalog information_schema for Views, and system.metadata.materialized_views for Materialized Views"
                },
                "bookmarkCount" : {
                "type" : "integer",
                "description" : "The number of bookmarks for this data product.",
                "format" : "int32"
                },
                "productOwners" : {
                "type" : "array",
                "description" : "User-supplied list of owners.  Used to indicate who is maintaining this data product.",
                "items" : {
                    "$ref" : "DataProductOwner"
                }
                }
            },
            "description" : "Detailed data for a data product"
            },
            "DataProductOwner" : {
            "required" : [ "email", "name" ],
            "type" : "object",
            "properties" : {
                "name" : {
                "maxLength" : 40,
                "minLength" : 1,
                "type" : "string",
                "description" : "Name of the owner.",
                "example" : "Alice Smith"
                },
                "email" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "Data product name.",
                "example" : "alice.smith@example.com"
                }
            },
            "description" : "Data for a data product owner."
            },
            "DataProductStatus" : {
            "type" : "string",
            "description" : "Publishing status of data product or dataset.",
            "enum" : [ "DRAFT", "PUBLISHED", "PENDING_CHANGES" ]
            },
            "DataProductUserData" : {
            "required" : [ "isBookmarked" ],
            "type" : "object",
            "properties" : {
                "isBookmarked" : {
                "type" : "boolean",
                "description" : "True if the authorized user has bookmarked this data product."
                },
                "rating" : {
                "maximum" : 5,
                "minimum" : 1,
                "type" : "integer",
                "description" : "Rating given to this data product by the authorized user.",
                "format" : "int32"
                }
            },
            "description" : "Detailed data product data for the authorized user"
            },
            "MaterializedViewDataset" : {
            "required" : [ "columns", "createdAt", "createdBy", "definitionProperties", "definitionQuery", "description", "markedForDeletion", "name", "publishedAt", "publishedBy", "status", "updatedAt", "updatedBy" ],
            "type" : "object",
            "properties" : {
                "name" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "Name of the materialized view."
                },
                "description" : {
                "type" : "string",
                "description" : "Description of the materialized view."
                },
                "createdBy" : {
                "type" : "string",
                "description" : "Name of the user who created the materialized view."
                },
                "definitionQuery" : {
                "type" : "string",
                "description" : "Definition query for the materialized view."
                },
                "definitionProperties" : {
                "type" : "object",
                "additionalProperties" : {
                    "type" : "object",
                    "description" : "Definition properties for the materialized view."
                },
                "description" : "Definition properties for the materialized view."
                },
                "status" : {
                "$ref" : "DataProductStatus"
                },
                "columns" : {
                "type" : "array",
                "description" : "Column definitions.",
                "items" : {
                    "$ref" : "ColumnDocumentation"
                }
                },
                "markedForDeletion" : {
                "type" : "boolean",
                "description" : "If true, then this materialized view will be removed as part of the next publish."
                },
                "createdAt" : {
                "type" : "string",
                "description" : "Timestamp of when this materialized view was created.",
                "format" : "date-time"
                },
                "updatedAt" : {
                "type" : "string",
                "description" : "Timestamp of when this materialized view was last updated. This is initialized to createdAt.",
                "format" : "date-time"
                },
                "updatedBy" : {
                "type" : "string",
                "description" : "Name of the user who last updated the materialized view.  This is initialized to createdBy"
                },
                "publishedAt" : {
                "type" : "string",
                "description" : "Timestamp of when this materialized view was last published.",
                "format" : "date-time"
                },
                "publishedBy" : {
                "type" : "string",
                "description" : "Name of the user who last published the materialized view."
                },
                "matchesTrinoDefinition" : {
                "type" : "boolean",
                "description" : "If published, this value is true if data product is in sync with what's created in Trino for all its components. Only set if the logged user has the permissions to query the Trino definitions for all datasets (Data Product Catalog information_schema for Views, and system.metadata.materialized_views for Materialized Views"
                }
            },
            "description" : "Detailed data for a materialized view"
            },
            "RelevantLink" : {
            "required" : [ "label", "url" ],
            "type" : "object",
            "properties" : {
                "label" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "Label for the link.",
                "example" : "Example Link"
                },
                "url" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "URL of the link.",
                "example" : "https://example.com"
                }
            },
            "description" : "Relevant link for a data product"
            },
            "ViewDataset" : {
            "required" : [ "columns", "createdAt", "createdBy", "definitionQuery", "description", "markedForDeletion", "name", "status", "updatedAt", "updatedBy" ],
            "type" : "object",
            "properties" : {
                "name" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "Name of the view dataset."
                },
                "description" : {
                "type" : "string",
                "description" : "Description of the view dataset."
                },
                "createdBy" : {
                "type" : "string",
                "description" : "Name of the user who created the view dataset."
                },
                "definitionQuery" : {
                "type" : "string",
                "description" : "Definition query for the dataset."
                },
                "status" : {
                "$ref" : "DataProductStatus"
                },
                "columns" : {
                "type" : "array",
                "description" : "Column definitions of the view dataset.",
                "items" : {
                    "$ref" : "ColumnDocumentation"
                }
                },
                "markedForDeletion" : {
                "type" : "boolean",
                "description" : "If true, then this view dataset will be removed as part of the next publish."
                },
                "createdAt" : {
                "type" : "string",
                "description" : "Timestamp of when this view dataset was created.",
                "format" : "date-time"
                },
                "updatedAt" : {
                "type" : "string",
                "description" : "Timestamp of when this view dataset was last updated. This is initialized to createdAt.",
                "format" : "date-time"
                },
                "updatedBy" : {
                "type" : "string",
                "description" : "Name of the user who last updated the view dataset.  This is initialized to createdBy"
                },
                "publishedAt" : {
                "type" : "string",
                "description" : "Timestamp of when this view dataset was last published.",
                "format" : "date-time"
                },
                "publishedBy" : {
                "type" : "string",
                "description" : "Name of the user who last published the view dataset."
                },
                "matchesTrinoDefinition" : {
                "type" : "boolean",
                "description" : "If published, this value is true if data product is in sync with what's created in Trino for all its components. Only set if the logged user has the permissions to query the Trino definitions for all datasets (Data Product Catalog information_schema for Views, and system.metadata.materialized_views for Materialized Views"
                }
            },
            "description" : "Detailed data for a view dataset"
            },
            "CloneDataProductPayload" : {
            "required" : [ "catalogName", "newName" ],
            "type" : "object",
            "properties" : {
                "newName" : {
                "type" : "string",
                "description" : "Name for the new (cloned) data product."
                },
                "catalogName" : {
                "type" : "string",
                "description" : "Catalog for the cloned data product"
                },
                "dataDomainId" : {
                "type" : "string",
                "description" : "Domain for the new data product.  If not specified then the domain of the source data product will be used.",
                "format" : "uuid"
                }
            },
            "description" : "Options for cloning a data product"
            },
            "DataProductPayload" : {
            "required" : [ "catalogName", "dataDomainId", "name", "summary" ],
            "type" : "object",
            "properties" : {
                "name" : {
                "maxLength" : 40,
                "minLength" : 1,
                "type" : "string",
                "description" : "Data product name.",
                "example" : "Campaign performance"
                },
                "catalogName" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "Catalog for this data product.",
                "example" : "data_products"
                },
                "dataDomainId" : {
                "type" : "string",
                "description" : "UUID of the domain that this data product belongs to.",
                "format" : "uuid",
                "example" : "00e29ec8-21f1-4239-afe3-05ee5a3ef57c"
                },
                "summary" : {
                "maxLength" : 150,
                "type" : "string",
                "description" : "Summary description for this data product.",
                "example" : "This data product provides details about the performance of the organization's marketing campaigns."
                },
                "description" : {
                "type" : "string",
                "description" : "Detailed description for this data product.",
                "example" : "How the data is generated, how frequently it is updated, and any other relevant information for the users of the data product."
                },
                "views" : {
                "type" : "array",
                "description" : "List of view datasets",
                "items" : {
                    "$ref" : "ViewDatasetPayload"
                }
                },
                "materializedViews" : {
                "type" : "array",
                "description" : "List of materialized view datasets",
                "items" : {
                    "$ref" : "MaterializedViewDatasetPayload"
                }
                },
                "owners" : {
                "type" : "array",
                "description" : "User-supplied list of owners.  Used to indicate who is maintaining this data product.",
                "items" : {
                    "$ref" : "DataProductOwner"
                }
                },
                "relevantLinks" : {
                "type" : "array",
                "description" : "Relevant links for this data product.",
                "items" : {
                    "$ref" : "RelevantLink"
                }
                }
            },
            "description" : "Data for creating or updating a data product"
            },
            "MaterializedViewDatasetPayload" : {
            "required" : [ "name" ],
            "type" : "object",
            "properties" : {
                "name" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "Name of the dataset.  Must be a valid SQL name with lowercase letters.",
                "example" : "campaign_performance_by_quarter"
                },
                "description" : {
                "type" : "string",
                "description" : "Description of the dataset.",
                "example" : "Campaign performance data per quarter."
                },
                "definitionQuery" : {
                "type" : "string",
                "description" : "Definition query for the materialized view.",
                "example" : "SELECT name AS region_name FROM tpch.sf1.region"
                },
                "definitionProperties" : {
                "type" : "object",
                "additionalProperties" : {
                    "type" : "object",
                    "description" : "Map of definition properties for the materialized view. Valid keys are **refresh_interval** and **incremental_column**.",
                    "example" : "\"refresh_interval\" : \"60m\""
                },
                "description" : "Map of definition properties for the materialized view. Valid keys are **refresh_interval** and **incremental_column**.",
                "example" : "\"refresh_interval\" : \"60m\""
                },
                "columns" : {
                "type" : "array",
                "description" : "List of column definitions for the dataset.",
                "items" : {
                    "$ref" : "ColumnDocumentation"
                }
                },
                "markedForDeletion" : {
                "type" : "boolean",
                "description" : "Whether this dataset is marked to be deleted in the next publishing workflow"
                }
            },
            "description" : "Data for creating or updating a materialized view"
            },
            "ViewDatasetPayload" : {
            "required" : [ "name" ],
            "type" : "object",
            "properties" : {
                "name" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "Name of the dataset.  Must be a valid SQL name with lowercase letters.",
                "example" : "campaign_performance_by_quarter"
                },
                "description" : {
                "type" : "string",
                "description" : "Description of the dataset.",
                "example" : "Campaign performance data per quarter."
                },
                "definitionQuery" : {
                "type" : "string",
                "description" : "Definition query for the dataset.",
                "example" : "SELECT name AS region_name FROM tpch.sf1.region"
                },
                "columns" : {
                "type" : "array",
                "description" : "List of column definitions for the dataset.",
                "items" : {
                    "$ref" : "ColumnDocumentation"
                }
                },
                "markedForDeletion" : {
                "type" : "boolean",
                "description" : "Whether this dataset is marked to be deleted in the next publishing workflow"
                }
            },
            "description" : "Data for creating or updating a view dataset"
            },
            "Materialized view refresh metadata" : {
            "type" : "object",
            "properties" : {
                "lastImport" : {
                "$ref" : "MaterializedViewImportMetadata"
                },
                "incrementalColumn" : {
                "type" : "string",
                "description" : "Column used for incremental refresh to apply an incremental_column > max(incremental_column) filter when loading data incrementally from the source table. This facilitates loading only newer data from the source table instead of the entire table in each refresh iteration. If no column is specified, a full refresh is executed. The column need to be monotonically increasing with each new record. Typically types are dates or increasing integer values used as identifiers.",
                "nullable" : true
                },
                "refreshInterval" : {
                "type" : "string",
                "description" : "Refresh interval of the materialized view.  Minimum duration is 60 minutes."
                },
                "estimatedNextRefreshTime" : {
                "type" : "string",
                "description" : "Estimated time for the next refresh of the materialized view.",
                "format" : "date-time"
                }
            },
            "description" : "Materialized view refresh metadata, such as last import status, only available for Hive catalogs"
            },
            "MaterializedViewImportMetadata" : {
            "type" : "object",
            "properties" : {
                "status" : {
                "type" : "string",
                "description" : "Import status."
                },
                "scheduledTime" : {
                "type" : "string",
                "description" : "Scheduled time of the import.",
                "format" : "date-time"
                },
                "startTime" : {
                "type" : "string",
                "description" : "The start time of the import.",
                "format" : "date-time"
                },
                "finishTime" : {
                "type" : "string",
                "description" : "The finish time of the import.",
                "format" : "date-time"
                },
                "rowCount" : {
                "type" : "integer",
                "description" : "Row count of the import.",
                "format" : "int64"
                },
                "error" : {
                "type" : "string",
                "description" : "Error message of the import.",
                "nullable" : true
                }
            },
            "description" : "Materialized View import metadata, such as scheduled time, only available for Hive catalogs",
            "nullable" : true
            },
            "CatalogDetails" : {
            "required" : [ "catalogName", "connectorName", "isMaterializedViewEnabled" ],
            "type" : "object",
            "properties" : {
                "catalogName" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "Name of the catalog."
                },
                "connectorName" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "Name of the connector for this catalog."
                },
                "isMaterializedViewEnabled" : {
                "type" : "boolean",
                "description" : "Whether materialized views are enabled or not for this catalog."
                }
            },
            "description" : "Detailed information for a catalog suitable to store data products."
            },
            "DomainReassignmentRequest" : {
            "required" : [ "dataProductIds", "newDomainId" ],
            "type" : "object",
            "properties" : {
                "dataProductIds" : {
                "type" : "array",
                "description" : "List of Data Product IDs that will be reassigned",
                "items" : {
                    "type" : "string",
                    "description" : "List of Data Product IDs that will be reassigned",
                    "format" : "uuid"
                }
                },
                "newDomainId" : {
                "type" : "string",
                "description" : "All Data Products specified in the ID list will be reassigned to this domain.",
                "format" : "uuid"
                }
            },
            "description" : "Request values for reassigning domains"
            },
            "Data product summary" : {

            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "string",
                "description" : "Data product ID",
                "format" : "uuid"
                },
                "name" : {
                "maxLength" : 40,
                "minLength" : 1,
                "type" : "string",
                "description" : "Data product name."
                },
                "catalogName" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "Catalog for this data product."
                },
                "schemaName" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "Trino schema name that will be generated for this data product."
                },
                "dataDomainId" : {
                "type" : "string",
                "description" : "ID of the domain that this data product belongs to.",
                "format" : "uuid"
                },
                "summary" : {
                "maxLength" : 150,
                "type" : "string",
                "description" : "Summary description for this data product."
                },
                "description" : {
                "type" : "string",
                "description" : "Description for this data product."
                },
                "createdBy" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "User who created this data product."
                },
                "status" : {
                "$ref" : "DataProductStatus"
                },
                "createdAt" : {
                "type" : "string",
                "description" : "Timestamp of when this data product was created.",
                "format" : "date-time"
                },
                "updatedAt" : {
                "type" : "string",
                "description" : "Timestamp of when this data product was last updated.  Will be initialized to createdAt timestamp.",
                "format" : "date-time"
                },
                "publishedAt" : {
                "type" : "string",
                "description" : "Timestamp of when this data product was last published.",
                "format" : "date-time"
                },
                "publishedBy" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "User who published this data product."
                },
                "lastQueriedAt" : {
                "type" : "string",
                "description" : "Timestamp of when this data product was last queried.",
                "format" : "date-time"
                },
                "lastQueriedBy" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "Last user who used this data product."
                },
                "ratingsAverage" : {
                "maximum" : 5,
                "minimum" : 1,
                "type" : "number",
                "description" : "Average user rating of this data product.  If empty then this data product has not been rated yet.",
                "format" : "float"
                },
                "ratingsCount" : {
                "type" : "integer",
                "description" : "Number of user ratings of this data product.",
                "format" : "int32"
                },
                "userData" : {
                "$ref" : "DataProductUserData"
                }
            },
            "description" : "Summary data for a list of data products"
            },
            "SearchOptions" : {
            "type" : "object",
            "properties" : {
                "searchString" : {
                "type" : "string",
                "description" : "Returns all data products containing this string.  The following fields are searched:\nData Product: name, description, creator\nData sets: name, description\nColumn Descriptions: name, description, dataset name."
                },
                "sortKey" : {
                "$ref" : "SortKey"
                },
                "sortDirection" : {
                "type" : "string",
                "description" : "Specifies if sorting is ascending or descending.",
                "enum" : [ "ASC", "DESC" ]
                },
                "limit" : {
                "type" : "object",
                "properties" : {
                    "empty" : {
                    "type" : "boolean"
                    },
                    "present" : {
                    "type" : "boolean"
                    },
                    "asInt" : {
                    "type" : "integer",
                    "format" : "int32"
                    }
                },
                "description" : "Maximum number of data products to return.  Default is 100, maximum is 1000"
                },
                "onlyBookmarked" : {
                "type" : "boolean",
                "description" : "If true return only data products bookmarked by the authorized user."
                },
                "dataDomainIds" : {
                "type" : "array",
                "description" : "Restrict data products to those contained in specified domains.",
                "items" : {
                    "type" : "string",
                    "description" : "Restrict data products to those contained in specified domains.",
                    "format" : "uuid"
                }
                },
                "tagIds" : {
                "type" : "array",
                "description" : "Restrict data products to those with specified tags.",
                "items" : {
                    "type" : "string",
                    "description" : "Restrict data products to those with specified tags.",
                    "format" : "uuid"
                }
                }
            },
            "description" : "Options for Data Product search.  A data product must match all specified options to be included in the results."
            },
            "SearchOptionsParam" : {
            "required" : [ "value" ],
            "type" : "object",
            "properties" : {
                "value" : {
                "$ref" : "SearchOptions"
                },
                "originalParam" : {
                "type" : "string"
                }
            }
            },
            "SortKey" : {
            "type" : "string",
            "description" : "Sorting options for search results.",
            "enum" : [ "NAME", "CREATED_AT", "CREATED_BY", "UPDATED_AT", "LAST_QUERIED_AT", "CATALOG_NAME", "SCHEMA_NAME", "RATINGS_AVERAGE", "BOOKMARK", "STATUS" ]
            },
            "SampleQuery" : {
            "required" : [ "name", "query" ],
            "type" : "object",
            "properties" : {
                "name" : {
                "maxLength" : 40,
                "minLength" : 1,
                "type" : "string",
                "description" : "Name of the sample query",
                "example" : "Select the name of all regions"
                },
                "description" : {
                "maxLength" : 255,
                "minLength" : 1,
                "type" : "string",
                "description" : "Description for the sample query",
                "nullable" : true,
                "example" : "This query selects the name of all regions from the tpch.sf1 schema"
                },
                "query" : {
                "type" : "string",
                "description" : "Text with the data product sample query",
                "example" : "SELECT * FROM tpch.sf1.region"
                }
            },
            "description" : "Sample query for the data product"
            },
            "DataProductTag" : {
            "required" : [ "id", "value" ],
            "type" : "object",
            "properties" : {
                "id" : {
                "type" : "string",
                "description" : "Tag ID.",
                "format" : "uuid"
                },
                "value" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "Tag value."
                }
            },
            "description" : "Detailed data for a data product tag"
            },
            "DataProductTagValue" : {
            "required" : [ "value" ],
            "type" : "object",
            "properties" : {
                "value" : {
                "maxLength" : 255,
                "type" : "string",
                "description" : "Tag value.",
                "example" : "marketing"
                }
            },
            "description" : "Request object for changing a data product tag value"
            },
            "DataProductWorkflowState" : {
            "type" : "object",
            "properties" : {
                "workflowType" : {
                "type" : "string",
                "description" : "Type of the workflow being checked",
                "enum" : [ "DELETE", "PUBLISH", "REFRESH_MATERIALIZED_VIEW" ]
                },
                "status" : {
                "type" : "string",
                "description" : "Current status of the workflow execution",
                "enum" : [ "SCHEDULED", "IN_PROGRESS", "COMPLETED", "ERROR" ]
                },
                "errors" : {
                "type" : "array",
                "description" : "List of errors, if any, related to the workflow execution",
                "nullable" : true,
                "items" : {
                    "$ref" : "Error"
                }
                },
                "isFinalStatus" : {
                "type" : "boolean",
                "description" : "Whether the workflow task reached a final status or not"
                }
            },
            "description" : "State of a data product async workflow task execution"
            },
            "Error" : {
            "type" : "object",
            "properties" : {
                "entityType" : {
                "type" : "string",
                "description" : "Entity type that produced the error",
                "enum" : [ "SCHEMA", "DATASET", "METADATA" ]
                },
                "entityName" : {
                "type" : "string",
                "description" : "Name of the entity that produced the error"
                },
                "message" : {
                "type" : "string",
                "description" : "Message with details about the error"
                }
            },
            "description" : "List of errors, if any, related to the workflow execution",
            "nullable" : true
            }
        }
        }
    }